{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":34377,"databundleVersionId":3220602,"sourceType":"competition"}],"dockerImageVersionId":30839,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/entelpi/voting-classifier-spaceship-titanic?scriptVersionId=219891925\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"from sklearnex import patch_sklearn\npatch_sklearn()\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nfrom catboost import CatBoostClassifier\nimport lightgbm as lgb\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\nfrom sklearn.ensemble import AdaBoostClassifier, ExtraTreesClassifier, RandomForestClassifier, GradientBoostingClassifier, VotingClassifier\nfrom sklearn.linear_model import SGDClassifier, RidgeClassifier, LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report, ConfusionMatrixDisplay\nfrom sklearn.model_selection import GridSearchCV, KFold, cross_val_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom statistics import stdev\nfrom xgboost import XGBClassifier\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport logging\nlogging.disable(logging.INFO)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-30T06:21:11.556754Z","iopub.execute_input":"2025-01-30T06:21:11.557167Z","iopub.status.idle":"2025-01-30T06:21:13.947091Z","shell.execute_reply.started":"2025-01-30T06:21:11.557137Z","shell.execute_reply":"2025-01-30T06:21:13.946198Z"}},"outputs":[{"name":"stderr","text":"Intel(R) Extension for Scikit-learn* enabled (https://github.com/intel/scikit-learn-intelex)\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"TRAIN_CSV = '/kaggle/input/spaceship-titanic/train.csv'\nTEST_CSV = '/kaggle/input/spaceship-titanic/test.csv'\n\ntrain_df = pd.read_csv(TRAIN_CSV)\ntest_df = pd.read_csv(TEST_CSV)\n\ntrain_df[\"Split_Part\"] = \"train\"\ntest_df[\"Split_Part\"] = \"test\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-30T06:21:13.948313Z","iopub.execute_input":"2025-01-30T06:21:13.948481Z","iopub.status.idle":"2025-01-30T06:21:14.009212Z","shell.execute_reply.started":"2025-01-30T06:21:13.948461Z","shell.execute_reply":"2025-01-30T06:21:14.008285Z"}},"outputs":[],"execution_count":2},{"cell_type":"markdown","source":"Let's see what we have.","metadata":{}},{"cell_type":"code","source":"train_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-30T06:21:14.011468Z","iopub.execute_input":"2025-01-30T06:21:14.011702Z","iopub.status.idle":"2025-01-30T06:21:14.034333Z","shell.execute_reply.started":"2025-01-30T06:21:14.011655Z","shell.execute_reply":"2025-01-30T06:21:14.033297Z"}},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"  PassengerId HomePlanet CryoSleep  Cabin  Destination   Age    VIP  \\\n0     0001_01     Europa     False  B/0/P  TRAPPIST-1e  39.0  False   \n1     0002_01      Earth     False  F/0/S  TRAPPIST-1e  24.0  False   \n2     0003_01     Europa     False  A/0/S  TRAPPIST-1e  58.0   True   \n3     0003_02     Europa     False  A/0/S  TRAPPIST-1e  33.0  False   \n4     0004_01      Earth     False  F/1/S  TRAPPIST-1e  16.0  False   \n\n   RoomService  FoodCourt  ShoppingMall     Spa  VRDeck               Name  \\\n0          0.0        0.0           0.0     0.0     0.0    Maham Ofracculy   \n1        109.0        9.0          25.0   549.0    44.0       Juanna Vines   \n2         43.0     3576.0           0.0  6715.0    49.0      Altark Susent   \n3          0.0     1283.0         371.0  3329.0   193.0       Solam Susent   \n4        303.0       70.0         151.0   565.0     2.0  Willy Santantines   \n\n   Transported Split_Part  \n0        False      train  \n1         True      train  \n2        False      train  \n3        False      train  \n4         True      train  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>HomePlanet</th>\n      <th>CryoSleep</th>\n      <th>Cabin</th>\n      <th>Destination</th>\n      <th>Age</th>\n      <th>VIP</th>\n      <th>RoomService</th>\n      <th>FoodCourt</th>\n      <th>ShoppingMall</th>\n      <th>Spa</th>\n      <th>VRDeck</th>\n      <th>Name</th>\n      <th>Transported</th>\n      <th>Split_Part</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0001_01</td>\n      <td>Europa</td>\n      <td>False</td>\n      <td>B/0/P</td>\n      <td>TRAPPIST-1e</td>\n      <td>39.0</td>\n      <td>False</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>Maham Ofracculy</td>\n      <td>False</td>\n      <td>train</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0002_01</td>\n      <td>Earth</td>\n      <td>False</td>\n      <td>F/0/S</td>\n      <td>TRAPPIST-1e</td>\n      <td>24.0</td>\n      <td>False</td>\n      <td>109.0</td>\n      <td>9.0</td>\n      <td>25.0</td>\n      <td>549.0</td>\n      <td>44.0</td>\n      <td>Juanna Vines</td>\n      <td>True</td>\n      <td>train</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0003_01</td>\n      <td>Europa</td>\n      <td>False</td>\n      <td>A/0/S</td>\n      <td>TRAPPIST-1e</td>\n      <td>58.0</td>\n      <td>True</td>\n      <td>43.0</td>\n      <td>3576.0</td>\n      <td>0.0</td>\n      <td>6715.0</td>\n      <td>49.0</td>\n      <td>Altark Susent</td>\n      <td>False</td>\n      <td>train</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0003_02</td>\n      <td>Europa</td>\n      <td>False</td>\n      <td>A/0/S</td>\n      <td>TRAPPIST-1e</td>\n      <td>33.0</td>\n      <td>False</td>\n      <td>0.0</td>\n      <td>1283.0</td>\n      <td>371.0</td>\n      <td>3329.0</td>\n      <td>193.0</td>\n      <td>Solam Susent</td>\n      <td>False</td>\n      <td>train</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0004_01</td>\n      <td>Earth</td>\n      <td>False</td>\n      <td>F/1/S</td>\n      <td>TRAPPIST-1e</td>\n      <td>16.0</td>\n      <td>False</td>\n      <td>303.0</td>\n      <td>70.0</td>\n      <td>151.0</td>\n      <td>565.0</td>\n      <td>2.0</td>\n      <td>Willy Santantines</td>\n      <td>True</td>\n      <td>train</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":3},{"cell_type":"markdown","source":"Let's see if we have missing values.","metadata":{}},{"cell_type":"code","source":"missing_fractions = train_df.isnull().mean().sort_values(ascending=False)\nmissing_fractions","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-30T06:21:14.036356Z","iopub.execute_input":"2025-01-30T06:21:14.036671Z","iopub.status.idle":"2025-01-30T06:21:14.051226Z","shell.execute_reply.started":"2025-01-30T06:21:14.03663Z","shell.execute_reply":"2025-01-30T06:21:14.049966Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"CryoSleep       0.024963\nShoppingMall    0.023927\nVIP             0.023352\nHomePlanet      0.023122\nName            0.023007\nCabin           0.022892\nVRDeck          0.021627\nFoodCourt       0.021051\nSpa             0.021051\nDestination     0.020936\nRoomService     0.020821\nAge             0.020591\nPassengerId     0.000000\nTransported     0.000000\nSplit_Part      0.000000\ndtype: float64"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"train_df.dropna(inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-30T06:21:14.052355Z","iopub.execute_input":"2025-01-30T06:21:14.052627Z","iopub.status.idle":"2025-01-30T06:21:14.071071Z","shell.execute_reply.started":"2025-01-30T06:21:14.05259Z","shell.execute_reply":"2025-01-30T06:21:14.070092Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"df = pd.concat((train_df, test_df))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-30T06:21:14.072276Z","iopub.execute_input":"2025-01-30T06:21:14.072541Z","iopub.status.idle":"2025-01-30T06:21:14.081996Z","shell.execute_reply.started":"2025-01-30T06:21:14.072515Z","shell.execute_reply":"2025-01-30T06:21:14.080882Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"df.drop([\"PassengerId\", \"Name\"], axis=1, inplace=True)\n\nle_homeplanet = LabelEncoder()\nle_cryosleep = LabelEncoder()\nle_destination = LabelEncoder()\nle_vip = LabelEncoder()\nle_transported = LabelEncoder()\n\ndf[\"HomePlanet\"] = le_homeplanet.fit_transform(df[\"HomePlanet\"])\ndf[\"CryoSleep\"] = le_cryosleep.fit_transform(df[\"CryoSleep\"])\ndf[\"Destination\"] = le_destination.fit_transform(df[\"Destination\"])\ndf[\"VIP\"] = le_vip.fit_transform(df[\"VIP\"])\ndf[\"Transported\"] = le_transported.fit_transform(df[\"Transported\"])\n\nnew = df[\"Cabin\"].str.split(\"/\", n=2, expand=True)\ndf[\"Cabin1\"] = new[0]\ndf[\"Cabin2\"] = new[1]\ndf[\"Cabin3\"] = new[2]\n\nle_cabin1 = LabelEncoder()\nle_cabin2 = LabelEncoder()\nle_cabin3 = LabelEncoder()\n\ndf[\"Cabin1\"] = le_cabin1.fit_transform(df[\"Cabin1\"])\ndf[\"Cabin2\"] = le_cabin1.fit_transform(df[\"Cabin2\"])\ndf[\"Cabin3\"] = le_cabin3.fit_transform(df[\"Cabin3\"])\n\ndf.drop([\"Cabin\"], axis=1, inplace=True)\ndf.fillna(df.mode().iloc[0], inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-30T06:21:14.08336Z","iopub.execute_input":"2025-01-30T06:21:14.083632Z","iopub.status.idle":"2025-01-30T06:21:14.157143Z","shell.execute_reply.started":"2025-01-30T06:21:14.083595Z","shell.execute_reply":"2025-01-30T06:21:14.156291Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"train_df['Transported'].value_counts()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-30T06:21:14.157926Z","iopub.execute_input":"2025-01-30T06:21:14.158105Z","iopub.status.idle":"2025-01-30T06:21:14.165368Z","shell.execute_reply.started":"2025-01-30T06:21:14.158085Z","shell.execute_reply":"2025-01-30T06:21:14.164313Z"}},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"Transported\nTrue     3327\nFalse    3279\nName: count, dtype: int64"},"metadata":{}}],"execution_count":8},{"cell_type":"markdown","source":"Data Imbalance Check","metadata":{}},{"cell_type":"code","source":"train_df['Transported'].value_counts().plot.pie(figsize=(5, 5))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-30T06:21:14.167944Z","iopub.execute_input":"2025-01-30T06:21:14.168157Z","iopub.status.idle":"2025-01-30T06:21:14.279752Z","shell.execute_reply.started":"2025-01-30T06:21:14.168132Z","shell.execute_reply":"2025-01-30T06:21:14.278761Z"}},"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"<Axes: ylabel='count'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 500x500 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":9},{"cell_type":"code","source":"y_train = df[df['Split_Part']==\"train\"][\"Transported\"].values\nX_train = df[df['Split_Part']==\"train\"].drop([\"Transported\", \"Split_Part\"],axis=1)\n\ny_test = df[df['Split_Part']==\"test\"][\"Transported\"].values\nX_test = df[df['Split_Part']==\"test\"].drop([\"Transported\", \"Split_Part\"],axis=1)\n\nkf = KFold(n_splits=5, shuffle=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-30T06:21:14.281148Z","iopub.execute_input":"2025-01-30T06:21:14.281322Z","iopub.status.idle":"2025-01-30T06:21:14.29943Z","shell.execute_reply.started":"2025-01-30T06:21:14.2813Z","shell.execute_reply":"2025-01-30T06:21:14.298337Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"# Makine öğrenmesi yöntemleri ve parametreleri belirleniyor\naccuracies = {}\nparameter_group = {}\nparameter_group[\"AdaBoost\"] = {'function': AdaBoostClassifier(random_state=42),\n                               'parameters': {'n_estimators': [10, 50, 100, 500],\n                                              'learning_rate': [0.0001, 0.001, 0.01, 0.1, 1.0]\n                                             }}\nparameter_group[\"CatBoost\"] = {'function': CatBoostClassifier(random_seed=42, logging_level='Silent'),\n                               'parameters': {'depth': [4, 5, 6],\n                                              'loss_function': ['Logloss', 'CrossEntropy'],\n                                              'l2_leaf_reg': np.logspace(-20, -19, 3)\n                                              }}\nparameter_group[\"Decision Tree\"] = {'function': DecisionTreeClassifier(random_state=1),\n                                    'parameters': {'criterion': [\"entropy\", \"log_loss\"],\n                                                  'max_features': ['auto', 'sqrt', 'log2'],\n                                                  'ccp_alpha': np.logspace(0.00001, 0.001, 5),\n                                                  'max_depth' : np.linspace(5, 50, 5)}}\nparameter_group[\"Extra Trees\"] = {'function': ExtraTreesClassifier(),\n                                  'parameters': {'criterion': [\"gini\", \"entropy\", \"log_loss\"],\n                                                 'max_features': [\"sqrt\", \"log2\"]}}\nparameter_group[\"Gradient Boosting\"] = {'function': GradientBoostingClassifier(random_state=42),\n                                        'parameters': {\"learning_rate\": np.logspace(.00001,1,5),\n                                                        \"max_depth\":[3,8]\n                                                        }}\nparameter_group[\"K-Neightbors\"] = {'function': KNeighborsClassifier(),\n                                   'parameters': {'n_neighbors': [2, 5],\n                                                  'weights': [\"uniform\", \"distance\"],\n                                                  'algorithm': [\"ball_tree\", \"kd_tree\"],\n                                                  'metric': ['euclidean', 'manhattan'],\n                                                  'p': [1]}}\nparameter_group[\"LGBM\"] = {'function': lgb.LGBMClassifier(objective = 'binary', boosting_type = \"dart\", verbose = 0, random_state=42),\n                           'parameters': {'learning_rate': np.logspace(.0001, .1, 5),\n                                          'n_estimators': [8, 16],\n                                          'reg_lambda' : [1,1.2],\n                                          \"num_leaves\": [31, 63, 127],\n                                          \"max_depth\": [-1, 3, 5],\n                                          \"subsample\": [0.8, 1.0],\n                                          \"colsample_bytree\": [0.8, 1.0]}}\nparameter_group[\"Logistic\"] = {'function': LogisticRegression(),\n                               'parameters': {\"penalty\":[\"l2\"]}}\nparameter_group[\"Random Forest\"] = {'function': RandomForestClassifier(),\n                                    'parameters': {'n_estimators': [5, 7, 10],\n                                                   'criterion': [\"gini\", \"entropy\", \"log_loss\"],\n                                                   'max_features': [\"sqrt\", \"log2\"]}}\nparameter_group[\"Ridge\"] = {'function': RidgeClassifier(),\n                            'parameters': {'solver': ['auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg', 'sag', 'saga', 'lbfgs']}}\nparameter_group[\"SGD\"] = {'function': SGDClassifier(random_state = 42),\n                          'parameters': {'loss': ['hinge', 'log_loss', 'modified_huber', 'squared_hinge', 'perceptron'],\n                                         'penalty': ['l2', 'l1', 'elasticnet']\n                                        }}\n#parameter_group[\"SVC\"] = {'function': SVC(),\n#                          'parameters': {'C': [1, 10],\n#                                         'kernel': [\"linear\", \"poly\", \"rbf\", \"sigmoid\"],\n#                                         'degree': [5, 7, 10]}}\nparameter_group[\"XGB\"] = {'function': XGBClassifier(objective='binary:logistic', seed=42, num_class = len(np.unique(y_train))),\n                          'parameters': {'min_child_weight': np.linspace(1,10,5),\n                                         'max_depth': [3, 4, 5, 6, 8, 10, 12, 15],\n                                         'learning_rate': [0.001, 0.01, 0.1, 0.20, 0.25, 0.30],\n                                         'gamma': np.linspace(.1,1,5),\n                                         'subsample': np.linspace(.1,1,5),\n                                         'colsample_bytree': np.linspace(.1,1,5)}}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-30T06:21:14.300953Z","iopub.execute_input":"2025-01-30T06:21:14.301222Z","iopub.status.idle":"2025-01-30T06:21:14.319158Z","shell.execute_reply.started":"2025-01-30T06:21:14.301187Z","shell.execute_reply":"2025-01-30T06:21:14.317955Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"for method in parameter_group:\n    print(method)\n    try:\n        classifier = parameter_group[method][\"function\"]\n        model = GridSearchCV(classifier, parameter_group[method][\"parameters\"], n_jobs=-1, verbose=1, cv=5)\n        model.fit(X_train, y_train)\n        print(model.best_params_)\n    \n        y_predict = model.predict(X_train)\n        accuracy = accuracy_score(y_train, y_predict)\n        #conf_matrix = confusion_matrix(y_train, y_predict)\n    \n        print('TRAIN RESULTS')\n        print('Train Accuracy: {:.3f}'.format(accuracy))\n        print(classification_report(y_train, y_predict))\n    \n        best_model = model.best_estimator_\n        \n        cross_val_accuracy = cross_val_score(best_model, X_train, y_train, cv=kf, scoring='accuracy')\n        mean_cv_accuracy = cross_val_accuracy.mean()\n        std_cv_accuracy = stdev(cross_val_accuracy)\n        \n        accuracies[method] = {'model':  model.best_estimator_,\n                              'Accuracy': accuracy,\n                              'Mean CV Accuracy': mean_cv_accuracy,\n                              'Std CV Accuracy': std_cv_accuracy\n                             }\n    except:\n        print(\"Failed\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-30T06:21:14.320274Z","iopub.execute_input":"2025-01-30T06:21:14.320483Z","iopub.status.idle":"2025-01-30T06:44:11.682637Z","shell.execute_reply.started":"2025-01-30T06:21:14.320457Z","shell.execute_reply":"2025-01-30T06:44:11.681535Z"}},"outputs":[{"name":"stdout","text":"AdaBoost\nFitting 5 folds for each of 25 candidates, totalling 125 fits\nFailed\nCatBoost\nFitting 5 folds for each of 18 candidates, totalling 90 fits\n{'depth': 4, 'l2_leaf_reg': 1e-20, 'loss_function': 'Logloss'}\nTRAIN RESULTS\nTrain Accuracy: 0.868\n              precision    recall  f1-score   support\n\n           0       0.87      0.86      0.87      3279\n           1       0.86      0.88      0.87      3327\n\n    accuracy                           0.87      6606\n   macro avg       0.87      0.87      0.87      6606\nweighted avg       0.87      0.87      0.87      6606\n\nDecision Tree\nFitting 5 folds for each of 150 candidates, totalling 750 fits\nFailed\nExtra Trees\nFitting 5 folds for each of 6 candidates, totalling 30 fits\n{'criterion': 'entropy', 'max_features': 'sqrt'}\nTRAIN RESULTS\nTrain Accuracy: 1.000\n              precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00      3279\n           1       1.00      1.00      1.00      3327\n\n    accuracy                           1.00      6606\n   macro avg       1.00      1.00      1.00      6606\nweighted avg       1.00      1.00      1.00      6606\n\nGradient Boosting\nFitting 5 folds for each of 10 candidates, totalling 50 fits\n{'learning_rate': 1.0000230261160268, 'max_depth': 3}\nTRAIN RESULTS\nTrain Accuracy: 0.901\n              precision    recall  f1-score   support\n\n           0       0.91      0.89      0.90      3279\n           1       0.90      0.91      0.90      3327\n\n    accuracy                           0.90      6606\n   macro avg       0.90      0.90      0.90      6606\nweighted avg       0.90      0.90      0.90      6606\n\nK-Neightbors\nFitting 5 folds for each of 16 candidates, totalling 80 fits\n{'algorithm': 'ball_tree', 'metric': 'euclidean', 'n_neighbors': 5, 'p': 1, 'weights': 'uniform'}\nTRAIN RESULTS\nTrain Accuracy: 0.817\n              precision    recall  f1-score   support\n\n           0       0.83      0.80      0.81      3279\n           1       0.81      0.84      0.82      3327\n\n    accuracy                           0.82      6606\n   macro avg       0.82      0.82      0.82      6606\nweighted avg       0.82      0.82      0.82      6606\n\nLinear Discriminant\nFitting 5 folds for each of 3 candidates, totalling 15 fits\n{'solver': 'svd'}\nTRAIN RESULTS\nTrain Accuracy: 0.769\n              precision    recall  f1-score   support\n\n           0       0.74      0.82      0.78      3279\n           1       0.81      0.71      0.76      3327\n\n    accuracy                           0.77      6606\n   macro avg       0.77      0.77      0.77      6606\nweighted avg       0.77      0.77      0.77      6606\n\nLGBM\nFitting 5 folds for each of 720 candidates, totalling 3600 fits\nFailed\nLogistic\nFitting 5 folds for each of 1 candidates, totalling 5 fits\n{'penalty': 'l2'}\nTRAIN RESULTS\nTrain Accuracy: 0.788\n              precision    recall  f1-score   support\n\n           0       0.82      0.74      0.78      3279\n           1       0.77      0.83      0.80      3327\n\n    accuracy                           0.79      6606\n   macro avg       0.79      0.79      0.79      6606\nweighted avg       0.79      0.79      0.79      6606\n\nQuadratic Discriminant\nFitting 5 folds for each of 5 candidates, totalling 25 fits\n{'reg_param': 0.75}\nTRAIN RESULTS\nTrain Accuracy: 0.770\n              precision    recall  f1-score   support\n\n           0       0.86      0.64      0.73      3279\n           1       0.72      0.90      0.80      3327\n\n    accuracy                           0.77      6606\n   macro avg       0.79      0.77      0.77      6606\nweighted avg       0.79      0.77      0.77      6606\n\nRandom Forest\nFitting 5 folds for each of 18 candidates, totalling 90 fits\n{'criterion': 'entropy', 'max_features': 'sqrt', 'n_estimators': 10}\nTRAIN RESULTS\nTrain Accuracy: 0.986\n              precision    recall  f1-score   support\n\n           0       0.98      1.00      0.99      3279\n           1       1.00      0.98      0.99      3327\n\n    accuracy                           0.99      6606\n   macro avg       0.99      0.99      0.99      6606\nweighted avg       0.99      0.99      0.99      6606\n\nRidge\nFitting 5 folds for each of 8 candidates, totalling 40 fits\n{'solver': 'auto'}\nTRAIN RESULTS\nTrain Accuracy: 0.769\n              precision    recall  f1-score   support\n\n           0       0.74      0.82      0.78      3279\n           1       0.81      0.72      0.76      3327\n\n    accuracy                           0.77      6606\n   macro avg       0.77      0.77      0.77      6606\nweighted avg       0.77      0.77      0.77      6606\n\nSGD\nFitting 5 folds for each of 15 candidates, totalling 75 fits\n{'loss': 'hinge', 'penalty': 'elasticnet'}\nTRAIN RESULTS\nTrain Accuracy: 0.573\n              precision    recall  f1-score   support\n\n           0       0.54      0.95      0.69      3279\n           1       0.80      0.20      0.32      3327\n\n    accuracy                           0.57      6606\n   macro avg       0.67      0.58      0.51      6606\nweighted avg       0.67      0.57      0.50      6606\n\nXGB\nFitting 5 folds for each of 30000 candidates, totalling 150000 fits\nFailed\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"accuracy_results = pd.DataFrame(accuracies).T\nprint(accuracy_results)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-30T06:44:11.683802Z","iopub.execute_input":"2025-01-30T06:44:11.68408Z","iopub.status.idle":"2025-01-30T06:44:11.761762Z","shell.execute_reply.started":"2025-01-30T06:44:11.684051Z","shell.execute_reply":"2025-01-30T06:44:11.760652Z"}},"outputs":[{"name":"stdout","text":"                                                                    model  \\\nCatBoost                <catboost.core.CatBoostClassifier object at 0x...   \nExtra Trees             (ExtraTreeClassifier(criterion='entropy', rand...   \nGradient Boosting       ([DecisionTreeRegressor(criterion='friedman_ms...   \nK-Neightbors            KNeighborsClassifier(algorithm='ball_tree', me...   \nLinear Discriminant                          LinearDiscriminantAnalysis()   \nLogistic                                             LogisticRegression()   \nQuadratic Discriminant      QuadraticDiscriminantAnalysis(reg_param=0.75)   \nRandom Forest           (DecisionTreeClassifier(criterion='entropy', m...   \nRidge                                                   RidgeClassifier()   \nSGD                     SGDClassifier(penalty='elasticnet', random_sta...   \n\n                        Accuracy Mean CV Accuracy Std CV Accuracy  \nCatBoost                0.868453         0.792616        0.015607  \nExtra Trees             0.999849         0.784593        0.014814  \nGradient Boosting       0.900999         0.765066        0.021235  \nK-Neightbors            0.817136         0.760371        0.022762  \nLinear Discriminant     0.769149         0.766122        0.007638  \nLogistic                0.788071         0.784592        0.014204  \nQuadratic Discriminant  0.769906         0.767487        0.022296  \nRandom Forest           0.985922         0.776265          0.0147  \nRidge                   0.769301         0.766122        0.007638  \nSGD                     0.572964         0.605211        0.081816  \n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"accuracy_results = accuracy_results[accuracy_results[\"Mean CV Accuracy\"]>.7]\n\nvc = VotingClassifier(estimators=[(index, row[\"model\"]) for index, row in accuracy_results.iterrows()], voting='hard')\nvc.fit(X_train, y_train)\ny_pred = vc.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-30T06:44:11.762967Z","iopub.execute_input":"2025-01-30T06:44:11.763233Z","iopub.status.idle":"2025-01-30T06:44:16.576758Z","shell.execute_reply.started":"2025-01-30T06:44:11.763196Z","shell.execute_reply":"2025-01-30T06:44:16.575688Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"submission_df = pd.concat([pd.read_csv(TEST_CSV)[\"PassengerId\"], pd.DataFrame(y_pred.astype(int), columns=[\"Transported\"])],axis=1)\nsubmission_df[\"Transported\"] = le_transported.inverse_transform(submission_df[\"Transported\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-30T06:44:16.577509Z","iopub.execute_input":"2025-01-30T06:44:16.577698Z","iopub.status.idle":"2025-01-30T06:44:16.601387Z","shell.execute_reply.started":"2025-01-30T06:44:16.577677Z","shell.execute_reply":"2025-01-30T06:44:16.600415Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"submission_df.to_csv(\"submission.csv\", index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-30T06:44:16.602366Z","iopub.execute_input":"2025-01-30T06:44:16.602561Z","iopub.status.idle":"2025-01-30T06:44:16.612928Z","shell.execute_reply.started":"2025-01-30T06:44:16.602538Z","shell.execute_reply":"2025-01-30T06:44:16.611866Z"}},"outputs":[],"execution_count":16}]}